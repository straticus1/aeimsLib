# AeimsLib WebSocket Server nginx Configuration
# Ubuntu-compatible configuration for interactive device control and VoIP integration
# Supports both aeimsLib WebSocket server and health checks for load balancer integration

server {
    listen 8080 default_server;
    listen [::]:8080 default_server;

    server_name _;
    root /var/www/html;
    index index.php index.html index.htm;

    # Security headers for interactive device control
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # CORS headers for WebSocket and device communication
    add_header Access-Control-Allow-Origin "*" always;
    add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS, PATCH" always;
    add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With, Accept, Origin" always;
    add_header Access-Control-Max-Age "3600" always;

    # Health check endpoint for ALB
    location = /health {
        access_log off;
        return 200 '{"status":"healthy","service":"aeimsLib","timestamp":"$time_iso8601","version":"1.0.0"}';
        add_header Content-Type application/json always;
    }

    # Health check alias for load balancers
    location = /healthcheck {
        access_log off;
        return 200 '{"status":"healthy","service":"aeimsLib","timestamp":"$time_iso8601","version":"1.0.0"}';
        add_header Content-Type application/json always;
    }

    # System info endpoint for monitoring
    location = /system-info {
        access_log off;
        try_files $uri /var/www/html/system-info;
    }

    # WebSocket proxy for device control
    location /websocket {
        proxy_pass http://127.0.0.1:8081;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        proxy_read_timeout 86400;
    }

    # Device control API endpoints
    location ~ ^/api/device/(scan|connect|disconnect|command) {
        try_files $uri /device_controller.php;
        include fastcgi_params;
        fastcgi_pass unix:/var/run/php/php8.1-fpm.sock;
        fastcgi_param SCRIPT_FILENAME $document_root/device_controller.php;
        fastcgi_param REQUEST_URI $uri;
        fastcgi_param QUERY_STRING $query_string;
    }

    # Pattern control API
    location ~ ^/api/pattern/(create|update|delete|execute) {
        try_files $uri /pattern_controller.php;
        include fastcgi_params;
        fastcgi_pass unix:/var/run/php/php8.1-fpm.sock;
        fastcgi_param SCRIPT_FILENAME $document_root/pattern_controller.php;
        fastcgi_param REQUEST_URI $uri;
        fastcgi_param QUERY_STRING $query_string;
    }

    # PHP file processing
    location ~ \.php$ {
        try_files $uri =404;
        include fastcgi_params;
        fastcgi_pass unix:/var/run/php/php8.1-fpm.sock;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_index index.php;
        fastcgi_buffer_size 16k;
        fastcgi_buffers 4 16k;
        fastcgi_connect_timeout 300;
        fastcgi_send_timeout 300;
        fastcgi_read_timeout 300;
    }

    # Static files serving
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        try_files $uri =404;
    }

    # Default location
    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }

    # Block access to hidden files and directories
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Block access to composer and git files
    location ~ (composer\.(json|lock)|\.git) {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Logging
    access_log /var/log/nginx/aeimslib_access.log;
    error_log /var/log/nginx/aeimslib_error.log;
}

# HTTP redirect server (if needed for SSL termination at ALB)
server {
    listen 80;
    listen [::]:80;
    server_name _;

    # Health check endpoint
    location = /health {
        access_log off;
        return 200 '{"status":"healthy","service":"aeimsLib","port":"80","timestamp":"$time_iso8601"}';
        add_header Content-Type application/json always;
    }

    # Redirect all other requests to HTTPS (handled by ALB)
    location / {
        return 301 https://$host$request_uri;
    }
}